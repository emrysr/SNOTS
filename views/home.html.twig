{% extends request.ajax ? "base_ajax.html.twig" : "base.html.twig" %}

{% block title title %}


{% block content %}

<form id="submit" class="text-left">
    <div class="form-group">
        <div class="input-group">
            <div class="input-group-prepend">
                <button class="btn btn-primary btn-lg"><svg class="icon"><use xlink:href="#bawd"></use></svg></button>
            </div>
            <input type="url" name="url" class="form-control form-control-lg" placeholder="https://" aria-describedby="urlHelpBlock">
        </div>
        <small id="urlHelpBlock" class="form-text text-muted">
        "High-five" a website
        </small>
    </div>
</form>


<div class="list-group mb-5">
    {% for row in rows %}
    <a class="list-group-item d-flex justify-content-between align-items-center" href="#">
    <span>{{row.url}} <small>{{row.timestamp|date("F jS \\a\\t g:ia")}}</small></span>
    <span class="badge badge-primary badge-pill" data-url="{{row.url}}">{{row.total}}</span>
    </a>
    {% endfor %}
</div>

{% endblock %}


{% block css %}
<style>
.fadeIn {
  animation: fadeIn 1s;
}

@keyframes fadeIn {
  from {
    opacity: 0;
  }
  to {
    opacity: 1;
  }
}
</style>
{% endblock %}


{% block js %}
<script>
document.querySelector('#submit').addEventListener('submit', function (e) {
    e.preventDefault()

    var url = e.target.querySelector('[name="url"]').value
    var data = new FormData(e.target)
        // if input valid
        var url_pattern = /^(?:(?:(?:https?|ftp):)?\/\/)(?:\S+(?::\S*)?@)?(?:(?!(?:10|127)(?:\.\d{1,3}){3})(?!(?:169\.254|192\.168)(?:\.\d{1,3}){2})(?!172\.(?:1[6-9]|2\d|3[0-1])(?:\.\d{1,3}){2})(?:[1-9]\d?|1\d\d|2[01]\d|22[0-3])(?:\.(?:1?\d{1,2}|2[0-4]\d|25[0-5])){2}(?:\.(?:[1-9]\d?|1\d\d|2[0-4]\d|25[0-4]))|(?:(?:[a-z\u00a1-\uffff0-9]-*)*[a-z\u00a1-\uffff0-9]+)(?:\.(?:[a-z\u00a1-\uffff0-9]-*)*[a-z\u00a1-\uffff0-9]+)*(?:\.(?:[a-z\u00a1-\uffff]{2,})).?)(?::\d{2,5})?(?:[/?#]\S*)?$/i;
        if(url_pattern.test( url )) {
            data.append('url', url)
            try {
                post('/likes', updateView, data)
            } catch (e) {
                showError(e)
            }
        }
    return false
});
var likes = null;

function updateView(error, data) {
    if (error) throw error
    get('/likes', function(error, response) {
        if (error) throw error
        likes = JSON.parse(response).data.likes
        likes.forEach(like => {
            let badge = document.querySelectorAll('.badge[data-url="'+like.url+'"]')[0]
            badge.innerText = like.total
            badge.classList.remove('fadeIn')
            setTimeout(function(){
                badge.classList.add('fadeIn')
            },10)
        });
    }, data)
}

function showError(xhr) {
    console.error(xhr);
}



/**
 * request a http call, sending response to callback function
 */
function request(url, callback, data, method) {
  method = method ? method : 'GET';
  const xhr = new XMLHttpRequest(), async = true
  xhr.timeout = 2000;
  xhr.onreadystatechange = function(e) {
    if (xhr.readyState === 4) {
      if (xhr.status === 200) {
       callback(null, xhr.response)
      } else {
       callback(xhr.status, null)
      }
    }
  }
  xhr.ontimeout = function () {
   console.log('Timeout on:', url)
  }
  xhr.open(method, url, async)
  xhr.send(data)
}
/**
 * request() function wrapper with POST verb
 */
function post(url,callback,data) {
    return request(url,callback,data,'POST')
}
/**
 * request() function wrapper with GET verb
 */
function get(url,callback,data) {
    return request(url,callback,data,'GET')
}

</script>
{% endblock %}
